{"ast":null,"code":"var _jsxFileName = \"/Users/franciscorovirosa/repos/FranRovi/Udemy/React/forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\n// We don't need useRef and useState, to validate form inputs, just one. \n//import React, { useState, useRef } from 'react';\nimport React, { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    isValid: enteredNameIsValid,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    resetFunction: resetNameInput\n  } = useInput(value => value.trim() !== ''); // const enteredNameIsValid = enteredName.trim() !== ''; \n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  let formIsValid;\n\n  if (enteredNameIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    } // setEnteredNameIsValid(true);\n\n\n    console.log(enteredName); // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n\n    setEnteredName('');\n    setEnteredNameTouched(false);\n    resetNameInput();\n  };\n\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \" Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"t/BUrIYNf+X12UdgmnBnj6r6cX0=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/franciscorovirosa/repos/FranRovi/Udemy/React/forms/src/components/SimpleInput.js"],"names":["React","useState","useInput","SimpleInput","props","value","enteredName","hasError","nameInputHasError","isValid","enteredNameIsValid","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","resetFunction","resetNameInput","trim","formIsValid","formSubmissionHandler","event","preventDefault","console","log","setEnteredName","setEnteredNameTouched","nameInputClasses"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,QAAP,MAAqB,oBAArB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AACJC,IAAAA,KAAK,EAAEC,WADH;AAEJC,IAAAA,QAAQ,EAAEC,iBAFN;AAGJC,IAAAA,OAAO,EAAEC,kBAHL;AAIJC,IAAAA,kBAAkB,EAAEC,iBAJhB;AAKJC,IAAAA,gBAAgB,EAAEC,eALd;AAMJC,IAAAA,aAAa,EAAEC;AANX,MAOFd,QAAQ,CAACG,KAAK,IAAIA,KAAK,CAACY,IAAN,OAAgB,EAA1B,CAPZ,CAD6B,CAU7B;AACA;;AAEA,MAAIC,WAAJ;;AACE,MAAIR,kBAAJ,EAAwB;AACxBQ,IAAAA,WAAW,GAAG,IAAd;AACD;;AAED,QAAMC,qBAAqB,GAAIC,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACX,kBAAL,EAAyB;AACvB;AACD,KALsC,CAOvC;;;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYjB,WAAZ,EARuC,CAUvC;AACA;;AAEAkB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAC,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAT,IAAAA,cAAc;AAEf,GAjBD;;AAoBA,QAAMU,gBAAgB,GAAGlB,iBAAiB,GAAG,sBAAH,GAA4B,cAAtE;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAEW,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEO,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE;AACA,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,EAAE,EAAC,MAHL;AAIE,QAAA,QAAQ,EAAEd,iBAJZ;AAKE,QAAA,MAAM,EAAEE,eALV;AAME,QAAA,KAAK,EAAER;AANT;AAAA;AAAA;AAAA;AAAA,cAFF,EASIE,iBAAiB,iBAAI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAK,CAACU,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA1DD;;GAAMf,W;UAQAD,Q;;;KARAC,W;AA4DN,eAAeA,WAAf","sourcesContent":["// We don't need useRef and useState, to validate form inputs, just one. \n//import React, { useState, useRef } from 'react';\n\nimport React, { useState } from 'react';\n\nimport useInput from '../hooks/use-input';\n\nconst SimpleInput = (props) => {\n  const { \n    value: enteredName,\n    hasError: nameInputHasError,\n    isValid: enteredNameIsValid,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    resetFunction: resetNameInput\n  } = useInput(value => value.trim() !=='');\n  \n  // const enteredNameIsValid = enteredName.trim() !== ''; \n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  let formIsValid\n    if (enteredNameIsValid) {\n    formIsValid = true;\n  }\n  \n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    // setEnteredNameIsValid(true);\n    console.log(enteredName);\n    \n    // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n\n    setEnteredName('');\n    setEnteredNameTouched(false);\n    resetNameInput();\n\n  };\n\n\n  const nameInputClasses = nameInputHasError ? 'form-control invalid' : 'form-control'\n\n  return (\n    <form onSubmit={formSubmissionHandler} >\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n          // ref={nameInputRef}\n          type='text'\n          id='name'\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName} />\n        { nameInputHasError && <p className='error-text'> Name must not be empty</p> }\n      </div>\n      <div className=\"form-actions\">\n        <button disabled = { !formIsValid } >Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}