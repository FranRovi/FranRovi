{"ast":null,"code":"var _jsxFileName = \"/Users/franciscorovirosa/repos/FranRovi/Udemy/React/http_request/src/App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport AddMovie from './components/AddMovie';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); // CODE BELOW IS AN ALTERNATIVE WAY OR WRITING .THEN CHAIN CALLS (PROMISES)\n  // NONETHELESS IS STILL ASYNC FUNCTIONS, THEY LOOK LIKE SYNCHRONOUS\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // STAR WARS API\n      // const response = await fetch('https://swapi.dev/api/films/');\n      // FIREBASE DATABASE THROUGH API\n      const response = await fetch('https://react-http-e45a9-default-rtdb.firebaseio.com/movies.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          releaseDate: data[key].releaseDate,\n          openingText: data[key].openingText\n        });\n      }\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          releaseDate: movieData.release_date,\n          openingText: movieData.opening_crawl\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]); // CHAIN CALL .THEN CODE EXAMPLE\n  // const fetchMoviesHandler = () => {\n  //   fetch('https://swapi.dev/api/films/')\n  //   .then(response=>{\n  //     return response.json();\n  //   }).then(data => {\n  //     const transformedMovies = data.results.map(movieData => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         releaseDate: movieData.release_date,\n  //         openingText: movieData.opening_crawl\n  //       }\n  //     })\n  //     setMovies(transformedMovies);\n  //   });\n  //.catch();\n  //}\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n  async function addMovieHandler(movie) {\n    console.log(movie);\n    const response = await fetch('https://react-http-e45a9-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }, \"Loading ... \");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/franciscorovirosa/repos/FranRovi/Udemy/React/http_request/src/App.js"],"names":["React","useState","useEffect","useCallback","AddMovie","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","releaseDate","openingText","transformedMovies","results","map","movieData","episode_id","release_date","opening_crawl","message","addMovieHandler","movie","console","log","method","body","JSON","stringify","headers","content","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport AddMovie from './components/AddMovie';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // CODE BELOW IS AN ALTERNATIVE WAY OR WRITING .THEN CHAIN CALLS (PROMISES)\n  // NONETHELESS IS STILL ASYNC FUNCTIONS, THEY LOOK LIKE SYNCHRONOUS\n\n  \n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // STAR WARS API\n      // const response = await fetch('https://swapi.dev/api/films/');\n      \n      // FIREBASE DATABASE THROUGH API\n      const response = await fetch('https://react-http-e45a9-default-rtdb.firebaseio.com/movies.json');\n      \n      if (!response.ok) {\n        throw new Error('Something went wrong!')\n        \n      }\n      const data = await response.json();\n\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          releaseDate: data[key].releaseDate,\n          openingText: data[key].openingText,\n        })\n      }\n      \n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          releaseDate: movieData.release_date,\n          openingText: movieData.opening_crawl\n        }\n      })\n      setMovies(transformedMovies);\n    } catch (error){\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);   \n  \n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  \n  // CHAIN CALL .THEN CODE EXAMPLE\n  \n  // const fetchMoviesHandler = () => {\n  //   fetch('https://swapi.dev/api/films/')\n  //   .then(response=>{\n  //     return response.json();\n  //   }).then(data => {\n  //     const transformedMovies = data.results.map(movieData => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         releaseDate: movieData.release_date,\n  //         openingText: movieData.opening_crawl\n  //       }\n  //     })\n  //     setMovies(transformedMovies);\n  //   });\n\n    //.catch();\n  //}\n\n  // const dummyMovies = [\n  //   {\n  //     id: 1,\n  //     title: 'Some Dummy Movie',\n  //     openingText: 'This is the opening text of the movie',\n  //     releaseDate: '2021-05-18',\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Some Dummy Movie 2',\n  //     openingText: 'This is the second opening text of the movie',\n  //     releaseDate: '2021-05-19',\n  //   },\n  // ];\n\n  async function addMovieHandler(movie) {\n    console.log(movie);\n    const response = await fetch('https://react-http-e45a9-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n  \n  let content = <p>Found no movies.</p>\n  \n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n  \n  if (error) {\n    content = <p>{error}</p>\n  }\n\n  if (isLoading) {\n    content = <p>Loading ... </p>\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {/* {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && <p>No movies to display yet, please click the button above.</p>}\n        {isLoading && <p>Loading ... </p>}\n        {!isLoading && error && <p>{error}</p>} */}\n        {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}